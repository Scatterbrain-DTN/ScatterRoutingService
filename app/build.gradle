plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.protobuf'
    id 'groovyx.android'
    id("org.jetbrains.dokka") version "1.5.0"
    id 'jacoco'
}

apply from: '../RxAndroidBle/dependencies.gradle'
def protobuf_version = "3.11.1"

android {
    buildToolsVersion "29.0.3"
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        compileSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.incremental": "true",
                        "room.schemaLocation": "$projectDir/schemas".toString()
                ]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        pickFirst 'META-INF/com.google.dagger_dagger.version'
    }

    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    sourceSets{
        main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

androidGroovy {
    skipJavaC = true
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:$protobuf_version"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

dependencies {
    implementation project(path: ':scatterbrainSDK')
    def lifecycle_version = "2.3.1"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation "com.google.protobuf:protobuf-javalite:$protobuf_version"
    implementation "androidx.room:room-runtime:2.4.0-alpha04"
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    // (see https://github.com/ReactiveX/RxJava/releases for latest 3.x.x version)
    implementation("androidx.security:security-crypto:1.1.0-alpha03")
    implementation project(':scatterbrainSDK')
    androidTestImplementation project(':scatterbrainSDK')
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.1.1'
    implementation project(':rxandroidble')
    kapt "androidx.room:room-compiler:2.4.0-alpha04" // For Kotlin use kapt instead of annotationProcessor
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    // Optional -- Hamcrest library
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    // Optional -- UI testing with UI Automator
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation "androidx.room:room-testing:2.4.0-alpha04"

    //robolectric and spock
    testImplementation  'org.codehaus.groovy:groovy:2.4.7:grooid'
    testImplementation 'com.github.hkhc:electricspock:0.9'
    testImplementation 'org.codehaus.groovy:groovy-all:2.5.13'
    testImplementation 'org.codehaus.groovy:groovy:3.0.3'
    testImplementation 'org.spockframework:spock-core:1.2-groovy-2.5'
    testImplementation 'junit:junit:4.13.2'

    //lazysodium cryptographic library
    implementation "com.goterl:lazysodium-android:5.0.2@aar"
    implementation 'net.java.dev.jna:jna:5.8.0@aar'

    implementation "com.google.dagger:dagger:$rootProject.ext.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.ext.daggerVersion"

    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    implementation "androidx.room:room-rxjava2:2.3.0"

    implementation "com.github.davidmoten:rxjava2-extras:0.1.38"
    implementation "androidx.core:core-ktx:1.6.0"
    androidTestImplementation 'androidx.test:core:1.4.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.firebase:firebase-crashlytics:18.2.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0'
}
repositories {
    mavenCentral()
}


task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}
